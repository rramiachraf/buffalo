/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "../../types"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Device: "pc" | "playstation" | "xbox"
  Platform: "blizzard" | "origin" | "steam" | "uplay"
  Role: "admin" | "customer" | "moderator"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenRootTypes {
  Cart: ContextModule.Cart;
  Game: { // root type
    description: string; // String!
    device: NexusGenEnums['Device']; // Device!
    id: string; // ID!
    name: string; // String!
    platform?: NexusGenEnums['Platform'] | null; // Platform
    poster?: string | null; // String
    price: number; // Float!
  }
  GameOfTheDay: { // root type
    id?: string | null; // ID
    largePoster?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
  }
  Mutation: {};
  Order: { // root type
    amount: number; // Float!
    game: string; // String!
    id: number; // Int!
    key: string; // String!
  }
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Device: NexusGenEnums['Device'];
  Platform: NexusGenEnums['Platform'];
  Role: NexusGenEnums['Role'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
}

export interface NexusGenFieldTypes {
  Cart: { // field return type
    id: string | null; // ID
    name: string | null; // String
    poster: string | null; // String
    price: number | null; // Float
  }
  Game: { // field return type
    description: string; // String!
    device: NexusGenEnums['Device']; // Device!
    id: string; // ID!
    name: string; // String!
    platform: NexusGenEnums['Platform'] | null; // Platform
    poster: string | null; // String
    price: number; // Float!
  }
  GameOfTheDay: { // field return type
    id: string | null; // ID
    largePoster: string | null; // String
    name: string | null; // String
    price: number | null; // Float
  }
  Mutation: { // field return type
    addGame: NexusGenRootTypes['Game'] | null; // Game
    addToCart: boolean | null; // Boolean
    checkout: string | null; // String
    createUser: NexusGenRootTypes['User'] | null; // User
    login: NexusGenRootTypes['User'] | null; // User
    logout: boolean | null; // Boolean
    makeGameOfTheDay: boolean | null; // Boolean
    removeFromCart: boolean | null; // Boolean
    updateRole: boolean | null; // Boolean
  }
  Order: { // field return type
    amount: number; // Float!
    game: string; // String!
    id: number; // Int!
    key: string; // String!
  }
  Query: { // field return type
    cart: Array<NexusGenRootTypes['Cart'] | null>; // [Cart]!
    game: NexusGenRootTypes['Game'] | null; // Game
    gameOfTheDay: NexusGenRootTypes['GameOfTheDay'] | null; // GameOfTheDay
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    getOrders: Array<NexusGenRootTypes['Order'] | null> | null; // [Order]
    me: NexusGenRootTypes['User'] | null; // User
    searchGame: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    total: number | null; // Float
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  Cart: { // field return type name
    id: 'ID'
    name: 'String'
    poster: 'String'
    price: 'Float'
  }
  Game: { // field return type name
    description: 'String'
    device: 'Device'
    id: 'ID'
    name: 'String'
    platform: 'Platform'
    poster: 'String'
    price: 'Float'
  }
  GameOfTheDay: { // field return type name
    id: 'ID'
    largePoster: 'String'
    name: 'String'
    price: 'Float'
  }
  Mutation: { // field return type name
    addGame: 'Game'
    addToCart: 'Boolean'
    checkout: 'String'
    createUser: 'User'
    login: 'User'
    logout: 'Boolean'
    makeGameOfTheDay: 'Boolean'
    removeFromCart: 'Boolean'
    updateRole: 'Boolean'
  }
  Order: { // field return type name
    amount: 'Float'
    game: 'String'
    id: 'Int'
    key: 'String'
  }
  Query: { // field return type name
    cart: 'Cart'
    game: 'Game'
    gameOfTheDay: 'GameOfTheDay'
    games: 'Game'
    getOrders: 'Order'
    me: 'User'
    searchGame: 'Game'
    total: 'Float'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    createdAt: 'Date'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addGame: { // args
      description: string; // String!
      device: NexusGenEnums['Device']; // Device!
      name: string; // String!
      platform?: NexusGenEnums['Platform'] | null; // Platform
      price: number; // Float!
    }
    addToCart: { // args
      gameId: string; // ID!
    }
    createUser: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    makeGameOfTheDay: { // args
      gameID: string; // ID!
    }
    removeFromCart: { // args
      gameId: string; // ID!
    }
    updateRole: { // args
      newRole: NexusGenEnums['Role']; // Role!
      userID: number; // Int!
    }
  }
  Query: {
    game: { // args
      id: string; // ID!
    }
    searchGame: { // args
      query: string; // String!
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Cart" | "Game" | "GameOfTheDay" | "Mutation" | "Order" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "Device" | "Platform" | "Role";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}